<?php/** * File User.php * * PHP version 5.4+ * * @author    Dzung Nguyen * @copyright 2010-2014 evolpas * @license   http://www.evolpas.com/license license * @version   XXX * @link      http://www.evolpas.com * @category  Model * @package   Model\Custommer *//** * Class User * * This is a model of users of app. It's mapping to entities of users table and handling some methods with this table * * @author    Dzung Nguyen * @copyright 2013-2014 evolpas * @license   http://www.evolpas.com/license license * @version   XXX * @link      http://www.evolpas.com * @category  Model * @package   Model\User * @since     XXX */use Illuminate\Auth\UserTrait;use Illuminate\Auth\UserInterface;use Illuminate\Auth\Reminders\RemindableTrait;use Illuminate\Auth\Reminders\RemindableInterface;class User extends BaseModel implements UserInterface, RemindableInterface {	/**	 * The database table used by the model.	 *	 * @var string	 */	protected $table = 'users';	/**	 * The attributes excluded from the model's JSON form.	 *	 * @var array	 */	protected $hidden = array('password', 'remember_token');	/**	 * Fill able securty	 */	public $fillable = array(		'first_name',		'last_name',		'email',		'phone',		'email',		'password',		'confirm_code',	);	/**	 * Get a list of users with format id=>column	 * 	 * @param string $column column to get	 * @param array $params conditions	 * 	 * @return array list of users	 * 	 * @since XXX	 */	public static function getListsByCompany($column, $companyId) {		$instance = new static;		$query = $instance->newQuery();		$users = $query->where('company_id', $companyId)->lists($column, 'id');		return $users;	}	public function company() {		return $this->belongsTo('Company');	}	/**	 * default rules for validation when register	 */	public static function registerValidate($input, $id = null) {		$rules = array(			'first_name' => 'required',			'last_name' => 'required',			'email' => 'required|email|unique:users,email,' . $id,			'password' => 'required|min:6',			'retype_password' => 'same:password'		);		return Validator::make($input, $rules);	}	public static function accountValidate($input, $id = null) {		$accountRules = array(			'password' => 'required|min:6',			'password_confirmation' => 'required|same:password',		);		return Validator::make($input, $accountRules);	}	public static function boot() {		parent::boot();		static::creating(function($user) {					//$customer->confirm_code = md5($customer->email) . md5($customer->id);					$user->password = Hash::make($user->password);				});	}	public function getFullNameAttribute() {		return $this->first_name . ' ' . $this->last_name;	}	/**	 * scope conditon	 * @param $params list conditions for getting	 * 	 * @return QueryBuilder	 */	public function scopeCondition($query, $params) {		if (isset($params['keyword'])) {			$query->searchLike($params['keyword'], array('first_name', 'last_name', 'email', 'user_name'));		}		return $query;	}	/**	 * Get the unique identifier for the user.	 *	 * @return mixed	 */	public function getAuthIdentifier() {		return $this->getKey();	}	/**	 * Get the password for the user.	 *	 * @return string	 */	public function getAuthPassword() {		return $this->password;	}	/**	 * Get the token value for the "remember me" session.	 *	 * @return string	 */	public function getRememberToken() {		return $this->remember_token;	}	/**	 * Set the token value for the "remember me" session.	 *	 * @param  string  $value	 * @return void	 */	public function setRememberToken($value) {		$this->remember_token = $value;	}	/**	 * Get the column name for the "remember me" token.	 *	 * @return string	 */	public function getRememberTokenName() {		return 'remember_token';	}	/**	 * Get the e-mail address where password reminders are sent.	 *	 * @return string	 */	public function getReminderEmail() {		return $this->email;	}}